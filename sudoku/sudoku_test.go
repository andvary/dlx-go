package sudoku

import (
	"github.com/google/go-cmp/cmp"
	"testing"
)

func TestSolveSudoku(t *testing.T) {
	tt := map[string]struct {
		in   [][]byte
		want [][]byte
	}{
		"1": {
			in: [][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			want: [][]byte{
				{'5', '3', '4', '6', '7', '8', '9', '1', '2'},
				{'6', '7', '2', '1', '9', '5', '3', '4', '8'},
				{'1', '9', '8', '3', '4', '2', '5', '6', '7'},
				{'8', '5', '9', '7', '6', '1', '4', '2', '3'},
				{'4', '2', '6', '8', '5', '3', '7', '9', '1'},
				{'7', '1', '3', '9', '2', '4', '8', '5', '6'},
				{'9', '6', '1', '5', '3', '7', '2', '8', '4'},
				{'2', '8', '7', '4', '1', '9', '6', '3', '5'},
				{'3', '4', '5', '2', '8', '6', '1', '7', '9'},
			},
		},
		"2": {
			in: [][]byte{
				{'.', '2', '.', '.', '.', '8', '5', '.', '.'},
				{'.', '4', '.', '.', '3', '.', '.', '.', '.'},
				{'5', '.', '3', '.', '.', '9', '.', '7', '.'},
				{'.', '.', '.', '8', '.', '.', '.', '4', '.'},
				{'9', '.', '5', '.', '6', '.', '8', '.', '.'},
				{'2', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '7', '.', '.', '1'},
				{'.', '3', '.', '.', '.', '.', '.', '.', '.'},
				{'8', '.', '6', '.', '9', '.', '4', '.', '.'},
			},
			want: [][]byte{
				{'6', '2', '9', '7', '1', '8', '5', '3', '4'},
				{'7', '4', '8', '2', '3', '5', '1', '9', '6'},
				{'5', '1', '3', '6', '4', '9', '2', '7', '8'},
				{'3', '6', '1', '8', '5', '2', '7', '4', '9'},
				{'9', '7', '5', '3', '6', '4', '8', '1', '2'},
				{'2', '8', '4', '9', '7', '1', '6', '5', '3'},
				{'4', '9', '2', '5', '8', '7', '3', '6', '1'},
				{'1', '3', '7', '4', '2', '6', '9', '8', '5'},
				{'8', '5', '6', '1', '9', '3', '4', '2', '7'},
			},
		},
		"3": {
			in: [][]byte{
				{'.', '.', '9', '7', '4', '8', '.', '.', '.'},
				{'7', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '2', '.', '1', '.', '9', '.', '.', '.'},
				{'.', '.', '7', '.', '.', '.', '2', '4', '.'},
				{'.', '6', '4', '.', '1', '.', '5', '9', '.'},
				{'.', '9', '8', '.', '.', '.', '3', '.', '.'},
				{'.', '.', '.', '8', '.', '3', '.', '2', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '6'},
				{'.', '.', '.', '2', '7', '5', '9', '.', '.'},
			},
			want: [][]byte{
				{'5', '1', '9', '7', '4', '8', '6', '3', '2'},
				{'7', '8', '3', '6', '5', '2', '4', '1', '9'},
				{'4', '2', '6', '1', '3', '9', '8', '7', '5'},
				{'3', '5', '7', '9', '8', '6', '2', '4', '1'},
				{'2', '6', '4', '3', '1', '7', '5', '9', '8'},
				{'1', '9', '8', '5', '2', '4', '3', '6', '7'},
				{'9', '7', '5', '8', '6', '3', '1', '2', '4'},
				{'8', '3', '2', '4', '9', '1', '7', '5', '6'},
				{'6', '4', '1', '2', '7', '5', '9', '8', '3'},
			},
		},
	}

	for name, tc := range tt {
		// https://go.dev/blog/subtests
		tc := tc
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			solveSudoku(tc.in)
			for i := range tc.want {
				if diff := cmp.Diff(tc.want[i], tc.in[i]); diff != "" {
					t.Errorf("\nwant: %v, \ngot:  %v", tc.want[i], tc.in[i])
				}
			}
		})
	}
}
